generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id              String   @id @default(cuid())
  name            String
  apiKey          String   @unique
  plan            String   @default("basic")
  createdAt       DateTime @default(now())
  subdomain       String?  @unique

  branding        Json?    @default("{}")
  settings        Json?    @default("{}")

  // Relationships
  Conversation    Conversation[]   @relation(onDelete: Cascade)
  ConversationLog ConversationLog[] @relation(onDelete: Cascade)
  Event           Event[]           @relation(onDelete: Cascade)
  Lead            Lead[]            @relation(onDelete: Cascade)
  Metric          Metric[]          @relation(onDelete: Cascade)
  Usage           Usage[]           @relation(onDelete: Cascade)
  AdminUser       AdminUser[]       @relation(onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  tenantId  String
  sessionId String
  startedAt DateTime @default(now())
  endedAt   DateTime?

  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Message   Message[]

  @@unique([tenantId, sessionId])
  @@index([tenantId])
}

model ConversationLog {
  id        String   @id @default(cuid())
  tenantId  String
  sessionId String
  at        DateTime @default(now())
  data      Json

  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Event {
  id        String   @id @default(cuid())
  tenantId  String
  type      String
  content   String
  createdAt DateTime @default(now())

  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Lead {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String
  phone     String
  snippet   String
  tags      String[]
  createdAt DateTime @default(now())

  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  tokensIn       Int          @default(0)
  tokensOut      Int          @default(0)
  createdAt      DateTime     @default(now())

  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Metric {
  id        String   @id @default(cuid())
  tenantId  String
  type      String
  value     Float
  createdAt DateTime @default(now())

  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Usage {
  id               String   @id @default(cuid())
  tenantId         String
  model            String
  promptTokens     Int
  completionTokens Int
  cachedTokens     Int
  cost             Float
  breakdown        Json?    // optional, matches in-memory breakdown logs
  createdAt        DateTime @default(now())

  Tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model AdminUser {
  id           String   @id @default(cuid())
  tenantId     String
  email        String
  passwordHash String
  createdAt    DateTime @default(now())

  Tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@unique([tenantId, email]) // unique per tenant
}

